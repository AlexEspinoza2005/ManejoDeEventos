// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MannejoDeEventos.API.Migrations
{
    [DbContext(typeof(AppHDbContext))]
    [Migration("20250509144952_pOSTGRE")]
    partial class pOSTGRE
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ManejoDeEventos.Certificado", b =>
                {
                    b.Property<int>("IdCertificado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdCertificado"));

                    b.Property<DateTime>("FechaEmision")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("IdInscripcion")
                        .HasColumnType("integer");

                    b.HasKey("IdCertificado");

                    b.HasIndex("IdInscripcion")
                        .IsUnique();

                    b.ToTable("Certificados");
                });

            modelBuilder.Entity("ManejoDeEventos.Evento", b =>
                {
                    b.Property<int>("IdEvento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdEvento"));

                    b.Property<string>("FechaFin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FechaInicio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Lugar")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdEvento");

                    b.ToTable("Eventos");
                });

            modelBuilder.Entity("ManejoDeEventos.EventoPonente", b =>
                {
                    b.Property<int>("IdEventoPonente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdEventoPonente"));

                    b.Property<int>("EventoIdEvento")
                        .HasColumnType("integer");

                    b.Property<int?>("EventoPonenteIdEventoPonente")
                        .HasColumnType("integer");

                    b.Property<int>("IdEvento")
                        .HasColumnType("integer");

                    b.Property<int>("IdPonente")
                        .HasColumnType("integer");

                    b.Property<int>("PonenteIdPonente")
                        .HasColumnType("integer");

                    b.HasKey("IdEventoPonente");

                    b.HasIndex("EventoIdEvento");

                    b.HasIndex("EventoPonenteIdEventoPonente");

                    b.HasIndex("PonenteIdPonente");

                    b.ToTable("EventoSPonenteS");
                });

            modelBuilder.Entity("ManejoDeEventos.Inscripcion", b =>
                {
                    b.Property<int>("IdInscripcion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdInscripcion"));

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EventoIdEvento")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaInscripcion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("IdEvento")
                        .HasColumnType("integer");

                    b.Property<int>("IdParticipante")
                        .HasColumnType("integer");

                    b.Property<int>("ParticipanteIdParticipante")
                        .HasColumnType("integer");

                    b.HasKey("IdInscripcion");

                    b.HasIndex("EventoIdEvento");

                    b.HasIndex("ParticipanteIdParticipante");

                    b.ToTable("Inscripciones");
                });

            modelBuilder.Entity("ManejoDeEventos.Pago", b =>
                {
                    b.Property<int>("IdPago")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdPago"));

                    b.Property<DateTime>("FechaPago")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("IdInscripcion")
                        .HasColumnType("integer");

                    b.Property<string>("MedioPago")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Monto")
                        .HasColumnType("numeric");

                    b.HasKey("IdPago");

                    b.HasIndex("IdInscripcion")
                        .IsUnique();

                    b.ToTable("Pagos");
                });

            modelBuilder.Entity("ManejoDeEventos.Participante", b =>
                {
                    b.Property<int>("IdParticipante")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdParticipante"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Institucion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdParticipante");

                    b.ToTable("Participantes");
                });

            modelBuilder.Entity("ManejoDeEventos.Ponente", b =>
                {
                    b.Property<int>("IdPonente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdPonente"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Institucion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdPonente");

                    b.ToTable("Ponentes");
                });

            modelBuilder.Entity("ManejoDeEventos.Sesion", b =>
                {
                    b.Property<int>("IdSesion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdSesion"));

                    b.Property<int>("EventoIdEvento")
                        .HasColumnType("integer");

                    b.Property<string>("HoraFin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HoraInicio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("IdEvento")
                        .HasColumnType("integer");

                    b.Property<string>("Sala")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdSesion");

                    b.HasIndex("EventoIdEvento");

                    b.ToTable("Sesiones");
                });

            modelBuilder.Entity("ManejoDeEventos.Certificado", b =>
                {
                    b.HasOne("ManejoDeEventos.Inscripcion", "Inscripcion")
                        .WithOne("Certificado")
                        .HasForeignKey("ManejoDeEventos.Certificado", "IdInscripcion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inscripcion");
                });

            modelBuilder.Entity("ManejoDeEventos.EventoPonente", b =>
                {
                    b.HasOne("ManejoDeEventos.Evento", "Evento")
                        .WithMany("PonentesAsignados")
                        .HasForeignKey("EventoIdEvento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManejoDeEventos.EventoPonente", null)
                        .WithMany("EventosAsignados")
                        .HasForeignKey("EventoPonenteIdEventoPonente");

                    b.HasOne("ManejoDeEventos.Ponente", "Ponente")
                        .WithMany()
                        .HasForeignKey("PonenteIdPonente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evento");

                    b.Navigation("Ponente");
                });

            modelBuilder.Entity("ManejoDeEventos.Inscripcion", b =>
                {
                    b.HasOne("ManejoDeEventos.Evento", "Evento")
                        .WithMany("Inscripciones")
                        .HasForeignKey("EventoIdEvento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManejoDeEventos.Participante", "Participante")
                        .WithMany("Inscripciones")
                        .HasForeignKey("ParticipanteIdParticipante")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evento");

                    b.Navigation("Participante");
                });

            modelBuilder.Entity("ManejoDeEventos.Pago", b =>
                {
                    b.HasOne("ManejoDeEventos.Inscripcion", "Inscripcion")
                        .WithOne("Pago")
                        .HasForeignKey("ManejoDeEventos.Pago", "IdInscripcion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inscripcion");
                });

            modelBuilder.Entity("ManejoDeEventos.Sesion", b =>
                {
                    b.HasOne("ManejoDeEventos.Evento", "Evento")
                        .WithMany("Sesiones")
                        .HasForeignKey("EventoIdEvento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evento");
                });

            modelBuilder.Entity("ManejoDeEventos.Evento", b =>
                {
                    b.Navigation("Inscripciones");

                    b.Navigation("PonentesAsignados");

                    b.Navigation("Sesiones");
                });

            modelBuilder.Entity("ManejoDeEventos.EventoPonente", b =>
                {
                    b.Navigation("EventosAsignados");
                });

            modelBuilder.Entity("ManejoDeEventos.Inscripcion", b =>
                {
                    b.Navigation("Certificado");

                    b.Navigation("Pago");
                });

            modelBuilder.Entity("ManejoDeEventos.Participante", b =>
                {
                    b.Navigation("Inscripciones");
                });
#pragma warning restore 612, 618
        }
    }
}
